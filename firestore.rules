rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to check if the user is an admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Users can read/update their own profile. Admins can read any profile.
    match /users/{userId} {
      allow read, update, delete: if isOwner(userId) || isAdmin();
      allow create: if request.auth.uid != null;
    }

    // Trainers can read/update their own profile. Admins can read any profile.
    match /trainers/{trainerId} {
        allow read, update, delete: if isOwner(trainerId) || isAdmin();
        allow create: if request.auth.uid != null;
    }

    // Notifications: A user can only read notifications intended for them.
    match /notifications/{notificationId} {
      allow read: if isOwner(resource.data.userId);
      // Create is handled by server-side logic (admin SDK)
      allow create, update, delete: if false; 
    }

    // Other collections can be read by any authenticated user for now
    // Restrict write access to prevent unauthorized modifications
    match /blog/{postId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /courses/{courseId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /faqs/{faqId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /quizSets/{quizId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /promotionalPosters/{posterId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /siteBanners/{bannerId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Feedback, Reschedule Requests, Referrals should be writeable by authenticated users
    // but only readable by relevant parties (e.g., admin, involved trainer)
    match /feedback/{feedbackId} {
        allow create: if request.auth.uid != null;
        allow read, update, delete: if isAdmin();
    }
    match /rescheduleRequests/{requestId} {
        allow create: if request.auth.uid != null;
        allow read, update, delete: if isAdmin() || isOwner(resource.data.userId) || isOwner(resource.data.trainerId);
    }
     match /referrals/{referralId} {
        allow create: if request.auth.uid != null;
        allow read, update, delete: if isAdmin();
    }
  }
}
