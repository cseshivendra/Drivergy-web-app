rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users can only read their own profile, but anyone can create an account.
    // Updates are restricted to the owner of the document.
    match /users/{userId} {
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;
    }
    
    // Trainers can only read/update their own profile. Admin can manage all.
    match /trainers/{trainerId} {
      allow read, update, delete: if request.auth != null && request.auth.uid == trainerId;
      allow create: if request.auth != null;
    }

    // Notifications can only be read by the user they are intended for.
    // Notifications should only be created by the server (admin actions).
    match /notifications/{notificationId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create, update, delete: if false; // Deny client-side writes
    }
    
    // Public collections are readable by anyone.
    match /blog/{postId} {
      allow read: if true;
      allow write: if false; // Managed by admin
    }
    
    match /courses/{courseId} {
      allow read: if true;
      allow write: if false; // Managed by admin
    }

    match /faqs/{faqId} {
      allow read: if true;
      allow write: if false; // Managed by admin
    }

    match /quizSets/{quizId} {
      allow read: if true;
      allow write: if false; // Managed by admin
    }

    // Other collections should be locked down by default
    // Feedback, Reschedule Requests, etc. would have rules here
    // based on whether a user or trainer owns the document.
  }
}
